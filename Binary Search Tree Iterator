/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Stack<TreeNode>myStack;
    TreeNode current = new TreeNode(0);
    
    public BSTIterator(TreeNode root) {
        myStack = new Stack<TreeNode>();
        while(!myStack.empty()){
            myStack.pop();
        }
        current = root;
        // if(current != null){
            // myStack.push(current);
        // }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return (!myStack.empty() || current != null);
    }

    /** @return the next smallest number 二叉树的中序遍历 思想*/
    public int next() {
        while(current != null){
            myStack.push(current);
            current = current.left;
        }
        current = myStack.pop();
        int val = current.val;
        current = current.right;
        // myStack.push(current);
        return val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root); 
 * while (i.hasNext()) v[f()] = i.next();
 */
